'use client';

import { useState } from 'react';
import axios from 'axios';
import jsPDF from 'jspdf';

interface ExportButtonProps {
  sessionId: string;
}

interface SessionData {
  session_info: {
    id: string;
    type: string;
    created_at: string;
    duration: number;
  };
  conversation: Array<{
    role: string;
    content: string;
    timestamp: string;
  }>;
  evaluation: {
    total_responses: number;
    average_response_length: number;
    engagement_score: number;
    notes: string;
  };
}

export default function ExportButton({ sessionId }: ExportButtonProps) {
  const [isExporting, setIsExporting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const exportToPDF = async () => {
    setIsExporting(true);
    setError(null);

    try {
      // Fetch session data from backend
      const response = await axios.get(`http://localhost:8000/session/${sessionId}/export`);
      const sessionData: SessionData = response.data;

      // Create PDF
      const pdf = new jsPDF();
      let yPosition = 20;
      const lineHeight = 7;
      const pageHeight = pdf.internal.pageSize.height;

      // Helper function to add text with word wrapping
      const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize: number = 10) => {
        pdf.setFontSize(fontSize);
        const lines = pdf.splitTextToSize(text, maxWidth);
        pdf.text(lines, x, y);
        return y + (lines.length * lineHeight);
      };

      // Helper function to check if new page is needed
      const checkNewPage = (requiredSpace: number) => {
        if (yPosition + requiredSpace > pageHeight - 20) {
          pdf.addPage();
          yPosition = 20;
        }
      };

      // Title
      pdf.setFontSize(20);
      pdf.setFont(undefined, 'bold');
      pdf.text('AI Voice Interview Report', 20, yPosition);
      yPosition += 15;

      // Session Info
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Session Information', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Session ID: ${sessionData.session_info.id}`, 20, yPosition);
      yPosition += lineHeight;
      pdf.text(`Interview Type: ${sessionData.session_info.type.toUpperCase()}`, 20, yPosition);
      yPosition += lineHeight;
      pdf.text(`Date: ${new Date(sessionData.session_info.created_at).toLocaleString()}`, 20, yPosition);
      yPosition += lineHeight;
      pdf.text(`Total Exchanges: ${sessionData.session_info.duration}`, 20, yPosition);
      yPosition += 15;

      // Evaluation
      checkNewPage(60);
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Performance Evaluation', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(10);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Total Responses: ${sessionData.evaluation.total_responses}`, 20, yPosition);
      yPosition += lineHeight;
      pdf.text(`Average Response Length: ${Math.round(sessionData.evaluation.average_response_length)} characters`, 20, yPosition);
      yPosition += lineHeight;
      pdf.text(`Engagement Score: ${sessionData.evaluation.engagement_score}/10`, 20, yPosition);
      yPosition += lineHeight;
      yPosition = addWrappedText(`Notes: ${sessionData.evaluation.notes}`, 20, yPosition, 170);
      yPosition += 15;

      // Conversation Transcript
      checkNewPage(40);
      pdf.setFontSize(14);
      pdf.setFont(undefined, 'bold');
      pdf.text('Full Conversation Transcript', 20, yPosition);
      yPosition += 15;

      sessionData.conversation.forEach((message, index) => {
        checkNewPage(30);
        
        // Message header
        pdf.setFontSize(11);
        pdf.setFont(undefined, 'bold');
        const speaker = message.role === 'candidate' ? 'Candidate' : 'AI Interviewer';
        const timestamp = new Date(message.timestamp).toLocaleTimeString();
        pdf.text(`${speaker} (${timestamp}):`, 20, yPosition);
        yPosition += 8;
        
        // Message content
        pdf.setFontSize(10);
        pdf.setFont(undefined, 'normal');
        yPosition = addWrappedText(message.content, 20, yPosition, 170);
        yPosition += 10;
      });

      // Footer
      const totalPages = pdf.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setFont(undefined, 'normal');
        pdf.text(`Page ${i} of ${totalPages}`, pdf.internal.pageSize.width - 40, pdf.internal.pageSize.height - 10);
        pdf.text('Generated by AI Voice Interview Tool', 20, pdf.internal.pageSize.height - 10);
      }

      // Save the PDF
      const filename = `interview_report_${sessionData.session_info.type}_${new Date().toISOString().slice(0, 10)}.pdf`;
      pdf.save(filename);

    } catch (err) {
      setError('Failed to export interview report');
      console.error('Export error:', err);
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div>
      <button
        onClick={exportToPDF}
        disabled={isExporting}
        className={`px-4 py-2 rounded-lg font-medium transition-colors ${
          isExporting
            ? 'bg-gray-400 cursor-not-allowed text-gray-600'
            : 'bg-green-600 hover:bg-green-700 text-white'
        }`}
      >
        {isExporting ? 'Exporting...' : 'ðŸ“„ Export PDF'}
      </button>
      
      {error && (
        <div className="mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm text-red-600">
          {error}
        </div>
      )}
    </div>
  );
}
